# -*- shell-script -*-
#
#  Configuration file for ferm(1).
#
#  V: 1.0
#
#  ferm manual: https://manpages.debian.org/bullseye/ferm/ferm.1.en.html
#

# Make sure that these modules exist and are loaded.
@hook pre "/sbin/modprobe nf_conntrack_ftp";
@hook pre "/sbin/modprobe nfnetlink_log";

# Network interfaces.
@def $DEV_LAN = eth0;
@def $DEV_LOOPBACK = lo;
@def $DEV_VPN = tun0;

# Network definition for the loopback device. This is needed to allow
# DNS resolution on Ubuntu Linux where the local resolver is bound
# to 127.0.1.1 - as opposed to the default 127.0.0.1.
@def $NET_LOOPBACK = 127.0.0.1/8;

# Common application ports.
@def $PORT_DNS = 53;
@def $PORT_NTP = 123;
@def $PORT_SSH = 2122;
# Ports for Web Browsers.
@def $PORT_WEB = ( 80 443 );
# Ports for Windows Samba SMB.
@def $PORT_SMBT = ( 139 445 );
@def $PORT_SMBU = ( 137 138 );
# Port for Windows Transmission Web GUI.
@def $PORT_TWEB = 9091;
# Ports for Transmission Trackers.
@def $PORT_TRACKERS = ( 1337 6888 6969 );
# Ports Transmission is allowed to use.
@def $PORT_TRANSMISSION = 16384:65535;


# The ports the VPN allows OpenVPN to connect to
# For NordVPN TCP connections use port 443
# For NordVPN UDP connections use port 1194
# Change ports required for other VPN's but
# only to those that are supported
@def $PORT_OPENVPN = ( 443 1194 );

# Public DNS servers and those that are only reachable via VPN.
# DNS servers are specified in the outbound DNS rules to prevent DNS leaks
# (https://www.dnsleaktest.com/). The public DNS servers configured on your
# system should be the vpn ones, but you should verify this.
#
@def $IP_DNS_IPR_PUBLIC = ( 103.86.96.100/32 103.86.99.100/32 );

# Add your ISP name server to this object if you want to restrict
# which DNS servers can be queried.
@def $IP_DNS_PUBLIC = 0.0.0.0/0;

# DNS servers available within the VPN.
# For NordVPN DNS is 103.86.96.100/32 or 103.86.99.100
@def $IP_DNS_VPN = ( 103.86.96.100/32 103.86.99.100/32 );

# Make sure to use the proper VPN interface (e.g. tun0 in this case).
@def $VPN_ACTIVE = `ip link show tun0 >/dev/null 2>/dev/null && echo 1 || echo`;

# VPN interface conditional. If true the following rules are loaded.
@if $VPN_ACTIVE {
    domain ip {
        table filter {
            chain INPUT {
                interface $DEV_VPN {
                    proto (tcp udp) dport $PORT_TRANSMISSION ACCEPT;
                    proto udp dport $PORT_TRACKERS ACCEPT;
                }
            }

            chain OUTPUT {
# Default allowed outbound services on the VPN interface.
# If you need more simply add your rules here.
                outerface $DEV_VPN {
                    proto (tcp udp) daddr ( $IP_DNS_VPN $IP_DNS_IPR_PUBLIC ) dport $PORT_DNS ACCEPT;
                    proto (tcp udp) dport $PORT_TRANSMISSION ACCEPT;
                    proto (tcp udp) dport $PORT_WEB ACCEPT;
                    proto udp dport $PORT_TRACKERS ACCEPT;
                }
            }
        }
    }
}


# The main IPv4 rule set.
domain ip {
    table filter {
        chain INPUT {
        # The default policy for the chain 
            policy DROP;
        
        # Connection tracking.
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

        # Allow local traffic to loopback interface.
            daddr $NET_LOOPBACK ACCEPT;

        # Allowed services on the LAN interface.
        # SSH, TWEB (transmission gui - windows), samba smb (shared folders - windows)
            interface $DEV_LAN {
                proto tcp dport $PORT_SSH ACCEPT;
                proto tcp dport $PORT_TWEB ACCEPT;
                proto tcp dport $PORT_SMBT ACCEPT;
                proto udp dport $PORT_SMBU ACCEPT;
            }

        # Respond to ping.
                proto icmp icmp-type echo-request ACCEPT;

        # Log dropped packets.
#        NFLOG nflog-group 1;
#        DROP;
        }

        chain OUTPUT{
            policy DROP;

        # Connection tracking.
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

        # Allow local traffic from the loopback interface.
            saddr $NET_LOOPBACK ACCEPT;

        # Respond to ping.
                proto icmp icmp-type echo-request ACCEPT;

        # Allowed services on the LAN interface.
        # DNS (domain name server), NTP (network time), OPENVPN (connect port for vpn provider),
        # SSH, Web (apt update etc), TWEB (transmission gui - windows), samba smb (shared folders - windows)
            outerface $DEV_LAN {
                proto (tcp udp) daddr $IP_DNS_PUBLIC dport $PORT_DNS ACCEPT;
                proto udp dport $PORT_NTP ACCEPT;
                proto (tcp udp) dport $PORT_OPENVPN ACCEPT;
                proto tcp dport $PORT_SSH ACCEPT;
                proto (tcp udp) dport $PORT_WEB ACCEPT;
                proto tcp dport $PORT_TWEB ACCEPT;
                proto tcp dport $PORT_SMBT ACCEPT;
                proto udp dport $PORT_SMBU ACCEPT;
            }

        # Log dropped packets.
#        NFLOG nflog-group 1;
#        DROP;
        }

        chain FORWARD {
            policy DROP;

        # If you use your machine to route traffic eg.
        # from a VM you have to add rules here!

        # Log dropped packets.
#        NFLOG nflog-group 1;
#        DROP;
        }
    }
}